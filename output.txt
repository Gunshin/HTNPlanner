existing: {"a":"0", "b":"0"} new: {"a":"0", "b":"0"}
finalised: {"a":"0", "b":"0"}
D-----------------------------------------------------------------------------------------


starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"0", "b":"0"}
returning: {"a":"0", "b":"0"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: available timber location0 ::: {"a":"0", "b":"0"} _____ {"a":"1", "b":"1"}



starting:::labour
labour :::: [labour]
ran func: {"a":"1", "b":"1"}
returning: {"a":"1", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"1", "b":"1"} _____ {"a":"1", "b":"1"}
D-----------------------------------------------------------------------------------------


starting:::labour
labour :::: [labour]
ran func: {"a":"1", "b":"1"}
returning: {"a":"1", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"1", "b":"1"} _____ {"a":"1", "b":"1"}
setting function: available timber location0 ____ {"a":"1", "b":"1"}
existing: {"a":"0", "b":"0"} new: {"a":"1", "b":"1"}
finalised: {"a":"0", "b":"1"}
setting function: labour ____ {"a":"2", "b":"2"}
setting function: labour ____ {"a":"2", "b":"2"}



starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"0", "b":"1"}
returning: {"a":"0", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

TreeNodeIntMoreThanOrEqual.HeuristicComparisonEvaluate: 1 : 1 :: true
existing: {"a":"0", "b":"0"} new: {"a":"0", "b":"1"}
finalised: {"a":"0", "b":"1"}
D-----------------------------------------------------------------------------------------


starting:::labour
labour :::: [labour]
ran func: {"a":"1", "b":"2"}
returning: {"a":"1", "b":"2"}




starting:::2
2 :::: [2]
returning: {"a":"2", "b":"2"}

Increase.HeuristicExecute: labour ::: {"a":"1", "b":"2"} _____ {"a":"2", "b":"2"}



starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"0", "b":"1"}
returning: {"a":"0", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

D-----------------------------------------------------------------------------------------


starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"0", "b":"1"}
returning: {"a":"0", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: available timber location0 ::: {"a":"0", "b":"1"} _____ {"a":"1", "b":"1"}



starting:::labour
labour :::: [labour]
ran func: {"a":"1", "b":"2"}
returning: {"a":"1", "b":"2"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"1", "b":"2"} _____ {"a":"1", "b":"1"}
D-----------------------------------------------------------------------------------------


starting:::labour
labour :::: [labour]
ran func: {"a":"1", "b":"2"}
returning: {"a":"1", "b":"2"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"1", "b":"2"} _____ {"a":"1", "b":"1"}
setting function: labour ____ {"a":"3", "b":"4"}
setting function: available timber location0 ____ {"a":"-1", "b":"0"}
existing: {"a":"0", "b":"1"} new: {"a":"-1", "b":"0"}
finalised: {"a":"0", "b":"1"}
setting function: available timber location0 ____ {"a":"1", "b":"2"}
existing: {"a":"0", "b":"1"} new: {"a":"1", "b":"2"}
finalised: {"a":"0", "b":"2"}
setting function: labour ____ {"a":"2", "b":"3"}
setting function: labour ____ {"a":"2", "b":"3"}



starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"0", "b":"2"}
returning: {"a":"0", "b":"2"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

TreeNodeIntMoreThanOrEqual.HeuristicComparisonEvaluate: 2 : 1 :: true
C-----------------------------------------------------------------------------------------C-----------------------------------------------------------------------------------------C-----------------------------------------------------------------------------------------A-----------------------------------------------------------------------------------------


starting:::labour
labour :::: [labour]
ran func: {"a":"1", "b":"2"}
returning: {"a":"1", "b":"2"}




starting:::2
2 :::: [2]
returning: {"a":"2", "b":"2"}

Increase.HeuristicExecute: labour ::: {"a":"1", "b":"2"} _____ {"a":"2", "b":"2"}



starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"0", "b":"1"}
returning: {"a":"0", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

existing: {"a":"0", "b":"0"} new: {"a":"0", "b":"0"}
finalised: {"a":"0", "b":"0"}
existing: {"a":"0", "b":"0"} new: {"a":"-1", "b":"0"}
finalised: {"a":"0", "b":"0"}
B-----------------------------------------------------------------------------------------C-----------------------------------------------------------------------------------------


starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"0", "b":"0"}
returning: {"a":"0", "b":"0"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

TreeNodeIntMoreThanOrEqual.HeuristicComparisonEvaluate: 0 : 1 :: false
C-----------------------------------------------------------------------------------------


starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"0", "b":"1"}
returning: {"a":"0", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

TreeNodeIntMoreThanOrEqual.HeuristicComparisonEvaluate: 1 : 1 :: true
A-----------------------------------------------------------------------------------------


starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"0", "b":"1"}
returning: {"a":"0", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: available timber location0 ::: {"a":"0", "b":"1"} _____ {"a":"1", "b":"1"}



starting:::labour
labour :::: [labour]
ran func: {"a":"1", "b":"2"}
returning: {"a":"1", "b":"2"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"1", "b":"2"} _____ {"a":"1", "b":"1"}
existing: {"a":"0", "b":"0"} new: {"a":"1", "b":"2"}
finalised: {"a":"0", "b":"2"}
A-----------------------------------------------------------------------------------------


starting:::labour
labour :::: [labour]
ran func: {"a":"1", "b":"2"}
returning: {"a":"1", "b":"2"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"1", "b":"2"} _____ {"a":"1", "b":"1"}
A-----------------------------------------------------------------------------------------


starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"0", "b":"0"}
returning: {"a":"0", "b":"0"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: available timber location0 ::: {"a":"0", "b":"0"} _____ {"a":"1", "b":"1"}



starting:::labour
labour :::: [labour]
ran func: {"a":"1", "b":"1"}
returning: {"a":"1", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"1", "b":"1"} _____ {"a":"1", "b":"1"}
existing: {"a":"0", "b":"0"} new: {"a":"0", "b":"0"}
finalised: {"a":"0", "b":"0"}
existing: {"a":"0", "b":"0"} new: {"a":"1", "b":"1"}
finalised: {"a":"0", "b":"1"}
B-----------------------------------------------------------------------------------------


starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"0", "b":"1"}
returning: {"a":"0", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

TreeNodeIntMoreThanOrEqual.HeuristicComparisonEvaluate: 1 : 1 :: true
C-----------------------------------------------------------------------------------------A-----------------------------------------------------------------------------------------


starting:::labour
labour :::: [labour]
ran func: {"a":"1", "b":"1"}
returning: {"a":"1", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"1", "b":"1"} _____ {"a":"1", "b":"1"}
existing: {"a":"1", "b":"1"} new: {"a":"1", "b":"1"}
finalised: {"a":"1", "b":"1"}
D-----------------------------------------------------------------------------------------


starting:::labour
labour :::: [labour]
ran func: {"a":"2", "b":"2"}
returning: {"a":"2", "b":"2"}




starting:::2
2 :::: [2]
returning: {"a":"2", "b":"2"}

Increase.HeuristicExecute: labour ::: {"a":"2", "b":"2"} _____ {"a":"2", "b":"2"}



starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"1", "b":"1"}
returning: {"a":"1", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

D-----------------------------------------------------------------------------------------


starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"1", "b":"1"}
returning: {"a":"1", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: available timber location0 ::: {"a":"1", "b":"1"} _____ {"a":"1", "b":"1"}



starting:::labour
labour :::: [labour]
ran func: {"a":"2", "b":"2"}
returning: {"a":"2", "b":"2"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"2", "b":"2"} _____ {"a":"1", "b":"1"}
D-----------------------------------------------------------------------------------------


starting:::labour
labour :::: [labour]
ran func: {"a":"2", "b":"2"}
returning: {"a":"2", "b":"2"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"2", "b":"2"} _____ {"a":"1", "b":"1"}
setting function: labour ____ {"a":"4", "b":"4"}
setting function: available timber location0 ____ {"a":"0", "b":"0"}
existing: {"a":"1", "b":"1"} new: {"a":"0", "b":"0"}
finalised: {"a":"1", "b":"1"}
setting function: available timber location0 ____ {"a":"2", "b":"2"}
existing: {"a":"1", "b":"1"} new: {"a":"2", "b":"2"}
finalised: {"a":"1", "b":"2"}
setting function: labour ____ {"a":"3", "b":"3"}
setting function: labour ____ {"a":"3", "b":"3"}



starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"1", "b":"2"}
returning: {"a":"1", "b":"2"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

TreeNodeIntMoreThanOrEqual.HeuristicComparisonEvaluate: 2 : 1 :: true
C-----------------------------------------------------------------------------------------C-----------------------------------------------------------------------------------------A-----------------------------------------------------------------------------------------


starting:::labour
labour :::: [labour]
ran func: {"a":"2", "b":"2"}
returning: {"a":"2", "b":"2"}




starting:::2
2 :::: [2]
returning: {"a":"2", "b":"2"}

Increase.HeuristicExecute: labour ::: {"a":"2", "b":"2"} _____ {"a":"2", "b":"2"}



starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"1", "b":"1"}
returning: {"a":"1", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

existing: {"a":"0", "b":"0"} new: {"a":"0", "b":"0"}
finalised: {"a":"0", "b":"0"}
existing: {"a":"0", "b":"0"} new: {"a":"0", "b":"0"}
finalised: {"a":"0", "b":"0"}
B-----------------------------------------------------------------------------------------C-----------------------------------------------------------------------------------------


starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"1", "b":"1"}
returning: {"a":"1", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

TreeNodeIntMoreThanOrEqual.HeuristicComparisonEvaluate: 1 : 1 :: true
A-----------------------------------------------------------------------------------------


starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"1", "b":"1"}
returning: {"a":"1", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: available timber location0 ::: {"a":"1", "b":"1"} _____ {"a":"1", "b":"1"}



starting:::labour
labour :::: [labour]
ran func: {"a":"2", "b":"2"}
returning: {"a":"2", "b":"2"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"2", "b":"2"} _____ {"a":"1", "b":"1"}
existing: {"a":"0", "b":"0"} new: {"a":"2", "b":"2"}
finalised: {"a":"0", "b":"2"}
A-----------------------------------------------------------------------------------------


starting:::labour
labour :::: [labour]
ran func: {"a":"2", "b":"2"}
returning: {"a":"2", "b":"2"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"2", "b":"2"} _____ {"a":"1", "b":"1"}
existing: {"a":"0", "b":"0"} new: {"a":"0", "b":"0"}
finalised: {"a":"0", "b":"0"}
D-----------------------------------------------------------------------------------------


starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"0", "b":"0"}
returning: {"a":"0", "b":"0"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: available timber location0 ::: {"a":"0", "b":"0"} _____ {"a":"1", "b":"1"}



starting:::labour
labour :::: [labour]
ran func: {"a":"2", "b":"2"}
returning: {"a":"2", "b":"2"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"2", "b":"2"} _____ {"a":"1", "b":"1"}
D-----------------------------------------------------------------------------------------


starting:::labour
labour :::: [labour]
ran func: {"a":"2", "b":"2"}
returning: {"a":"2", "b":"2"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"2", "b":"2"} _____ {"a":"1", "b":"1"}
setting function: available timber location0 ____ {"a":"1", "b":"1"}
existing: {"a":"0", "b":"0"} new: {"a":"1", "b":"1"}
finalised: {"a":"0", "b":"1"}
setting function: labour ____ {"a":"3", "b":"3"}
setting function: labour ____ {"a":"3", "b":"3"}



starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"0", "b":"1"}
returning: {"a":"0", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

TreeNodeIntMoreThanOrEqual.HeuristicComparisonEvaluate: 1 : 1 :: true
existing: {"a":"0", "b":"0"} new: {"a":"0", "b":"1"}
finalised: {"a":"0", "b":"1"}
D-----------------------------------------------------------------------------------------


starting:::labour
labour :::: [labour]
ran func: {"a":"2", "b":"3"}
returning: {"a":"2", "b":"3"}




starting:::2
2 :::: [2]
returning: {"a":"2", "b":"2"}

Increase.HeuristicExecute: labour ::: {"a":"2", "b":"3"} _____ {"a":"2", "b":"2"}



starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"0", "b":"1"}
returning: {"a":"0", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

D-----------------------------------------------------------------------------------------


starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"0", "b":"1"}
returning: {"a":"0", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: available timber location0 ::: {"a":"0", "b":"1"} _____ {"a":"1", "b":"1"}



starting:::labour
labour :::: [labour]
ran func: {"a":"2", "b":"3"}
returning: {"a":"2", "b":"3"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"2", "b":"3"} _____ {"a":"1", "b":"1"}
D-----------------------------------------------------------------------------------------


starting:::labour
labour :::: [labour]
ran func: {"a":"2", "b":"3"}
returning: {"a":"2", "b":"3"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"2", "b":"3"} _____ {"a":"1", "b":"1"}
setting function: labour ____ {"a":"4", "b":"5"}
setting function: available timber location0 ____ {"a":"-1", "b":"0"}
existing: {"a":"0", "b":"1"} new: {"a":"-1", "b":"0"}
finalised: {"a":"0", "b":"1"}
setting function: available timber location0 ____ {"a":"1", "b":"2"}
existing: {"a":"0", "b":"1"} new: {"a":"1", "b":"2"}
finalised: {"a":"0", "b":"2"}
setting function: labour ____ {"a":"3", "b":"4"}
setting function: labour ____ {"a":"3", "b":"4"}



starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"0", "b":"2"}
returning: {"a":"0", "b":"2"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

TreeNodeIntMoreThanOrEqual.HeuristicComparisonEvaluate: 2 : 1 :: true
C-----------------------------------------------------------------------------------------C-----------------------------------------------------------------------------------------C-----------------------------------------------------------------------------------------A-----------------------------------------------------------------------------------------


starting:::labour
labour :::: [labour]
ran func: {"a":"2", "b":"3"}
returning: {"a":"2", "b":"3"}




starting:::2
2 :::: [2]
returning: {"a":"2", "b":"2"}

Increase.HeuristicExecute: labour ::: {"a":"2", "b":"3"} _____ {"a":"2", "b":"2"}



starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"0", "b":"1"}
returning: {"a":"0", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

existing: {"a":"0", "b":"0"} new: {"a":"0", "b":"0"}
finalised: {"a":"0", "b":"0"}
existing: {"a":"0", "b":"0"} new: {"a":"-1", "b":"0"}
finalised: {"a":"0", "b":"0"}
B-----------------------------------------------------------------------------------------C-----------------------------------------------------------------------------------------


starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"0", "b":"0"}
returning: {"a":"0", "b":"0"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

TreeNodeIntMoreThanOrEqual.HeuristicComparisonEvaluate: 0 : 1 :: false
C-----------------------------------------------------------------------------------------


starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"0", "b":"1"}
returning: {"a":"0", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

TreeNodeIntMoreThanOrEqual.HeuristicComparisonEvaluate: 1 : 1 :: true
A-----------------------------------------------------------------------------------------


starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"0", "b":"1"}
returning: {"a":"0", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: available timber location0 ::: {"a":"0", "b":"1"} _____ {"a":"1", "b":"1"}



starting:::labour
labour :::: [labour]
ran func: {"a":"2", "b":"3"}
returning: {"a":"2", "b":"3"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"2", "b":"3"} _____ {"a":"1", "b":"1"}
existing: {"a":"0", "b":"0"} new: {"a":"1", "b":"2"}
finalised: {"a":"0", "b":"2"}
A-----------------------------------------------------------------------------------------


starting:::labour
labour :::: [labour]
ran func: {"a":"2", "b":"3"}
returning: {"a":"2", "b":"3"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"2", "b":"3"} _____ {"a":"1", "b":"1"}
A-----------------------------------------------------------------------------------------


starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"0", "b":"0"}
returning: {"a":"0", "b":"0"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: available timber location0 ::: {"a":"0", "b":"0"} _____ {"a":"1", "b":"1"}



starting:::labour
labour :::: [labour]
ran func: {"a":"2", "b":"2"}
returning: {"a":"2", "b":"2"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"2", "b":"2"} _____ {"a":"1", "b":"1"}
existing: {"a":"0", "b":"0"} new: {"a":"0", "b":"0"}
finalised: {"a":"0", "b":"0"}
existing: {"a":"0", "b":"0"} new: {"a":"1", "b":"1"}
finalised: {"a":"0", "b":"1"}
B-----------------------------------------------------------------------------------------


starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"0", "b":"1"}
returning: {"a":"0", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

TreeNodeIntMoreThanOrEqual.HeuristicComparisonEvaluate: 1 : 1 :: true
C-----------------------------------------------------------------------------------------A-----------------------------------------------------------------------------------------


starting:::labour
labour :::: [labour]
ran func: {"a":"2", "b":"2"}
returning: {"a":"2", "b":"2"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"2", "b":"2"} _____ {"a":"1", "b":"1"}
existing: {"a":"2", "b":"2"} new: {"a":"2", "b":"2"}
finalised: {"a":"2", "b":"2"}
D-----------------------------------------------------------------------------------------


starting:::labour
labour :::: [labour]
ran func: {"a":"3", "b":"3"}
returning: {"a":"3", "b":"3"}




starting:::2
2 :::: [2]
returning: {"a":"2", "b":"2"}

Increase.HeuristicExecute: labour ::: {"a":"3", "b":"3"} _____ {"a":"2", "b":"2"}



starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"2", "b":"2"}
returning: {"a":"2", "b":"2"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

D-----------------------------------------------------------------------------------------


starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"2", "b":"2"}
returning: {"a":"2", "b":"2"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: available timber location0 ::: {"a":"2", "b":"2"} _____ {"a":"1", "b":"1"}



starting:::labour
labour :::: [labour]
ran func: {"a":"3", "b":"3"}
returning: {"a":"3", "b":"3"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"3", "b":"3"} _____ {"a":"1", "b":"1"}
D-----------------------------------------------------------------------------------------


starting:::labour
labour :::: [labour]
ran func: {"a":"3", "b":"3"}
returning: {"a":"3", "b":"3"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"3", "b":"3"} _____ {"a":"1", "b":"1"}
setting function: labour ____ {"a":"5", "b":"5"}
setting function: available timber location0 ____ {"a":"1", "b":"1"}
existing: {"a":"2", "b":"2"} new: {"a":"1", "b":"1"}
finalised: {"a":"2", "b":"2"}
setting function: available timber location0 ____ {"a":"3", "b":"3"}
existing: {"a":"2", "b":"2"} new: {"a":"3", "b":"3"}
finalised: {"a":"2", "b":"3"}
setting function: labour ____ {"a":"4", "b":"4"}
setting function: labour ____ {"a":"4", "b":"4"}



starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"2", "b":"3"}
returning: {"a":"2", "b":"3"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

TreeNodeIntMoreThanOrEqual.HeuristicComparisonEvaluate: 3 : 1 :: true
C-----------------------------------------------------------------------------------------C-----------------------------------------------------------------------------------------A-----------------------------------------------------------------------------------------


starting:::labour
labour :::: [labour]
ran func: {"a":"3", "b":"3"}
returning: {"a":"3", "b":"3"}




starting:::2
2 :::: [2]
returning: {"a":"2", "b":"2"}

Increase.HeuristicExecute: labour ::: {"a":"3", "b":"3"} _____ {"a":"2", "b":"2"}



starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"2", "b":"2"}
returning: {"a":"2", "b":"2"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

existing: {"a":"0", "b":"0"} new: {"a":"0", "b":"0"}
finalised: {"a":"0", "b":"0"}
existing: {"a":"0", "b":"0"} new: {"a":"1", "b":"1"}
finalised: {"a":"0", "b":"1"}
B-----------------------------------------------------------------------------------------C-----------------------------------------------------------------------------------------


starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"2", "b":"2"}
returning: {"a":"2", "b":"2"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

TreeNodeIntMoreThanOrEqual.HeuristicComparisonEvaluate: 2 : 1 :: true
A-----------------------------------------------------------------------------------------


starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"2", "b":"2"}
returning: {"a":"2", "b":"2"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: available timber location0 ::: {"a":"2", "b":"2"} _____ {"a":"1", "b":"1"}



starting:::labour
labour :::: [labour]
ran func: {"a":"3", "b":"3"}
returning: {"a":"3", "b":"3"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"3", "b":"3"} _____ {"a":"1", "b":"1"}
existing: {"a":"0", "b":"1"} new: {"a":"3", "b":"3"}
finalised: {"a":"0", "b":"3"}
A-----------------------------------------------------------------------------------------


starting:::labour
labour :::: [labour]
ran func: {"a":"3", "b":"3"}
returning: {"a":"3", "b":"3"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"3", "b":"3"} _____ {"a":"1", "b":"1"}
existing: {"a":"1", "b":"1"} new: {"a":"1", "b":"1"}
finalised: {"a":"1", "b":"1"}
D-----------------------------------------------------------------------------------------


starting:::labour
labour :::: [labour]
ran func: {"a":"3", "b":"3"}
returning: {"a":"3", "b":"3"}




starting:::2
2 :::: [2]
returning: {"a":"2", "b":"2"}

Increase.HeuristicExecute: labour ::: {"a":"3", "b":"3"} _____ {"a":"2", "b":"2"}



starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"1", "b":"1"}
returning: {"a":"1", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

D-----------------------------------------------------------------------------------------


starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"1", "b":"1"}
returning: {"a":"1", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: available timber location0 ::: {"a":"1", "b":"1"} _____ {"a":"1", "b":"1"}



starting:::labour
labour :::: [labour]
ran func: {"a":"3", "b":"3"}
returning: {"a":"3", "b":"3"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"3", "b":"3"} _____ {"a":"1", "b":"1"}
D-----------------------------------------------------------------------------------------


starting:::labour
labour :::: [labour]
ran func: {"a":"3", "b":"3"}
returning: {"a":"3", "b":"3"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"3", "b":"3"} _____ {"a":"1", "b":"1"}
setting function: labour ____ {"a":"5", "b":"5"}
setting function: available timber location0 ____ {"a":"0", "b":"0"}
existing: {"a":"1", "b":"1"} new: {"a":"0", "b":"0"}
finalised: {"a":"1", "b":"1"}
setting function: available timber location0 ____ {"a":"2", "b":"2"}
existing: {"a":"1", "b":"1"} new: {"a":"2", "b":"2"}
finalised: {"a":"1", "b":"2"}
setting function: labour ____ {"a":"4", "b":"4"}
setting function: labour ____ {"a":"4", "b":"4"}



starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"1", "b":"2"}
returning: {"a":"1", "b":"2"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

TreeNodeIntMoreThanOrEqual.HeuristicComparisonEvaluate: 2 : 1 :: true
C-----------------------------------------------------------------------------------------C-----------------------------------------------------------------------------------------A-----------------------------------------------------------------------------------------


starting:::labour
labour :::: [labour]
ran func: {"a":"3", "b":"3"}
returning: {"a":"3", "b":"3"}




starting:::2
2 :::: [2]
returning: {"a":"2", "b":"2"}

Increase.HeuristicExecute: labour ::: {"a":"3", "b":"3"} _____ {"a":"2", "b":"2"}



starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"1", "b":"1"}
returning: {"a":"1", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

existing: {"a":"0", "b":"0"} new: {"a":"0", "b":"0"}
finalised: {"a":"0", "b":"0"}
existing: {"a":"0", "b":"0"} new: {"a":"0", "b":"0"}
finalised: {"a":"0", "b":"0"}
B-----------------------------------------------------------------------------------------C-----------------------------------------------------------------------------------------


starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"1", "b":"1"}
returning: {"a":"1", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

TreeNodeIntMoreThanOrEqual.HeuristicComparisonEvaluate: 1 : 1 :: true
A-----------------------------------------------------------------------------------------


starting:::available timber location0
available timber location0 :::: [available timber location0]
ran func: {"a":"1", "b":"1"}
returning: {"a":"1", "b":"1"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: available timber location0 ::: {"a":"1", "b":"1"} _____ {"a":"1", "b":"1"}



starting:::labour
labour :::: [labour]
ran func: {"a":"3", "b":"3"}
returning: {"a":"3", "b":"3"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"3", "b":"3"} _____ {"a":"1", "b":"1"}
existing: {"a":"0", "b":"0"} new: {"a":"2", "b":"2"}
finalised: {"a":"0", "b":"2"}
A-----------------------------------------------------------------------------------------


starting:::labour
labour :::: [labour]
ran func: {"a":"3", "b":"3"}
returning: {"a":"3", "b":"3"}




starting:::1
1 :::: [1]
returning: {"a":"1", "b":"1"}

Increase.HeuristicExecute: labour ::: {"a":"3", "b":"3"} _____ {"a":"1", "b":"1"}
